<?php

use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * @file
 * Module file for DSU Security module.
 */

/**
 * Get dsu_security module configuration.
 *
 * return object
 */
function get_security_configuration() {
  return \Drupal::config('dsu_security.settings');
}

/**
 * Implements hook_page_attachments_alter().
 */
function dsu_security_page_attachments_alter(array &$attachments) {
  foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
    if ($attachment[1] == 'system_meta_generator') {
      unset($attachments['#attached']['html_head'][$key]);
    }
  }
}

function dsu_security_page_attachments(array &$attachments) {
  // Apply patch on jQuery 2.2.4 version.
  if (get_security_configuration()->get('jquery_patch')) {
    $attachments['#attached']['library'][] = 'dsu_security/dsu_security';
  }
}

function dsu_security_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  //$pattern = '/(?:(?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/)|(?:(?<!\:|\\\|\')\/\/.*))/';
  //$jquery = $javascript['core/assets/vendor/jquery/jquery.min.js']['data'] ;
  //$output = preg_replace($pattern, '', $jquery);
  // Override jQuery path. if core jQuery version is less than 3.x.
  if (get_security_configuration()->get('jquery_patch')) {
    $javascript['core/assets/vendor/jquery/jquery.min.js']['data'] = drupal_get_path('module', 'dsu_security') . '/js/jquery.min.js';
  }
}


/**
 * Implements hook_form_alter().
 */
function dsu_security_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
      $form['#validate'][] = 'dsu_security_validate';
      break;
    case 'user_pass':
      $form['#validate'][] = 'dsu_security_user_pass_validate';
      break;
    case 'user_pass_reset':
      if (\Drupal::moduleHandler()->moduleExists('password_policy')) {
        $form['#validate'][] = '_password_policy_user_profile_form_validate';
      }
      break;
    case 'user_register_form':
      $form['actions']['submit']['#submit'][] = 'dsu_security_user_register_form_submit';
      // Hide password policy table from module password_policy_status
      if (isset($form['account']['password_policy_status']) and !empty($form['account']['password_policy_status'])) {
        $form['account']['password_policy_status'] = [];
      }
      $form['#validate'][] = 'dsu_security_unique_user_name_email_validate';
      break;
    case 'user_form':
      $form['actions']['submit']['#submit'][] = 'dsu_security_user_form_submit';
      $form['#validate'][] = 'dsu_security_validate';
      break;
    case 'user_admin_settings':
      $mail_config = \Drupal::service('config.factory')
        ->getEditable('user.mail');
      $config = \Drupal::service('config.factory')
        ->getEditable('user.settings');
      $form['email_exist'] = [
        '#type' => 'details',
        '#title' => t('User exist'),
        '#description' => t('Edit the email messages sent to users who already exist. The list of available tokens that can be used in e-mails is provided below.'),
        '#group' => 'email',
      ];
      $form['email_exist']['user_mail_status_exist_notify'] = [
        '#type' => 'checkbox',
        '#title' => t('Notify user when account is exist'),
        "#default_value" => $config->get('notify.status_exist'),
      ];
      $form['email_exist']['user_mail_status_exist_subject'] = [
        '#type' => 'textfield',
        '#title' => t('Subject'),
        "#default_value" => $mail_config->get('status_exist.subject'),
        "#maxlength" => 180,
      ];
      $form['email_exist']['user_mail_status_exist_body'] = [
        '#type' => 'textarea',
        '#title' => t('Body'),
        "#default_value" => $mail_config->get('status_exist.body'),
        "#rows" => 15,
      ];
      $form['actions']['submit']['#submit'][] = 'dsu_security_user_admin_settings_submit';
      break;
  }
}

/**
 * Removes user_pass messages.
 */
function dsu_security_validate(array $form, FormStateInterface $form_state) {
  $conf = \Drupal::config('login_security.settings');
  if ($form_state->hasAnyErrors()) {
    $errors = $form_state->getErrors();
    // We only remove messages if we get the following error.
    $reset_message = preg_grep("/(is not recognized as a username or an email address)|(is already taken)./", $errors);
    if (count($reset_message)) {
      if ($conf->get('disable_core_login_error')) {
        // Resets the form error status so no form fields are highlighted in
        // red.
        $form_state->setRebuild();
        $form_state->clearErrors();

        // Removes "$name is not recognized as a username or an email address."
        drupal_get_messages(NULL, TRUE);
      }
      elseif ($form['#id'] == 'user-form') {
        $response = new RedirectResponse('/', 302);
        $response->send();
      }
    }
  }
}

function dsu_security_user_register_form_submit(array $form, FormStateInterface &$form_state) {
  drupal_get_messages(NULL, TRUE);
  $dsu_security_config = \Drupal::config('dsu_security.settings');
  $redirect_url = (!empty($dsu_security_config->get('redirect_url'))) ? $dsu_security_config->get('redirect_url') : '/';
  $response = new RedirectResponse($redirect_url, 302);
  $response->send();
}

function dsu_security_user_form_submit(array $form, FormStateInterface &$form_state) {
  drupal_get_messages(NULL, TRUE);
  $response = new RedirectResponse('/', 302);
  $response->send();
}

/**
 * Validate user already exist and send mail.
 */
function dsu_security_unique_user_name_email_validate(array $form, FormStateInterface $form_state) {
  if ($form_state->hasAnyErrors()) {
    // Try to load by email.
    $account = user_load_by_mail($form_state->getValue('mail'));
    if (empty($account)) {
      // No success, try to load by name.
      $account = user_load_by_name($form_state->getValue('name'));
    }
    if ($account && \Drupal::currentUser()->isAnonymous()) {
      // Send email to user.
      $mail = _user_mail_notify('status_exist', $account);
      // Resets the form error status so no form fields are highlighted in.
      // red.
      if (!empty($mail)) {
        drupal_set_message(t('An e-mail has been sent with further instructions.'), 'status');
      }
      $dsu_security_config = \Drupal::config('dsu_security.settings');
      $redirect_url = (!empty($dsu_security_config->get('redirect_url'))) ? $dsu_security_config->get('redirect_url') : '/';
      $form_state->setRebuild();
      $form_state->clearErrors();
      $response = new RedirectResponse($redirect_url, 301);
      $request = \Drupal::request();
      $request->getSession()->save();
      $response->prepare($request);
      \Drupal::service('kernel')->terminate($request, $response);
      $response->send();
    }
  }
}

/**
 * Save mail configuration.
 */
function dsu_security_user_admin_settings_submit(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::service('config.factory')->getEditable('user.settings');
  $config->set('notify.status_exist', $form_state->getValue('user_mail_status_exist_notify'))
    ->save();
  $mail_config = \Drupal::service('config.factory')->getEditable('user.mail');
  $mail_config->set('status_exist.body', $form_state->getValue('user_mail_status_exist_body'));
  $mail_config->set('status_exist.subject', $form_state->getValue('user_mail_status_exist_subject'));
  $mail_config->save();
}

/**
 * Validate username exist on reset password.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function dsu_security_user_pass_validate(array $form, FormStateInterface $form_state) {
  if ($form_state->hasAnyErrors()) {
    $errors = $form_state->getErrors();
    $reset_message = preg_grep("/(is not recognized as a username or an email address)./", $errors);
    if (count($reset_message)) {
      // We only remove messages if we get the error and redirect to user login.
      $service = \Drupal::service('dsu_security.user_password_reset_redirect');
      $service->userResetPasswordFormRedirect($form_state);
    }
  }
}

/**
 * Implements hook_preprocess_status_messages().
 *
 * @param $variables
 */
function dsu_security_preprocess_status_messages(&$variables) {
  if (isset($variables['message_list']['status'])) {
    $status_messages = $variables['message_list']['status'];
    // We only replace the messages if we get the following message.
    $message_exist = preg_grep("/(Further instructions have been sent to your email address)./", $status_messages);
    foreach ($status_messages as $delta => $message) {
      if (count($message_exist)) {
        $variables['message_list']['status'][$delta] = "An email with further instructions has been sent.";
      }
    }
  }
}
