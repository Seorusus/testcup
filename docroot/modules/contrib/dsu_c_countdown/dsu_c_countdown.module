<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig; 
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Implements HOOK_preprocess_theme().
 */
function dsu_c_countdown_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__c_countdown' => [
      'template' => 'paragraph--c-countdown',
      'base hook' => 'paragraphs',
    ],
  ];
}

/**
 * Implements HOOK_preprocess_paragraph().
 */
function dsu_c_countdown_preprocess_paragraph(&$variables) {
  if ($variables['paragraph']->getType() == 'c_countdown') {
    $variables['#attached']['library'][] = 'dsu_c_countdown/countdown';
    $end_date = $variables['paragraph']->get('field_c_end_date')->getValue();
    $c_timezone = $variables['paragraph']->get('field_c_timezone')->getValue();
    $system_date = \Drupal::config('system.date');
    if(!empty($end_date) && !empty($c_timezone)) {
      $end_date_datetime = new \DateTime($end_date[0]['value']);
      $formatted_date = format_date($end_date_datetime->getTimestamp(), 'countdown_date', '', $c_timezone[0]['value']);
      $variables['content']['countdown_date'] = array(
          '#type' => 'markup',
          '#markup' => '<span class="countdown-date">'. $formatted_date .'</span>',
          '#weight' => -100
      );
    }
  }
}

/**
 * Callback function to get allowed values for timezone field.
 */
function dsu_c_countdown_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  return system_time_zones(NULL, TRUE);
}

/**
 * Callback function to get default value for timezone field.
 */
function dsu_c_countdown_default_value_function(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  $system_date = \Drupal::config('system.date');
  return ['value' => $system_date->get('timezone.default') ?: date_default_timezone_get()];
}
