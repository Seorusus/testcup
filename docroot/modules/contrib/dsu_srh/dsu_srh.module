<?php

use Drupal\block_content\BlockContentInterface;
use Drupal\dsu_srh\Controller\Importer;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * @file
 * Hook implementations for the DSU SRH module.
 */

/**
 * Implements hook_theme().
 */
function dsu_srh_theme($existing, $type, $theme, $path) {
  return [
    'field__field_recipe_images' => [
      'template' => 'field--field-recipe-images',
      'base hook' => 'field',
    ],
    'field__field_para_tool_image' => [
      'template' => 'field--field-recipe-images',
      'base hook' => 'field',
    ],
    'field__field_recipe_ingredient' => [
      'template' => 'field--field-recipe-ingredient',
      'base hook' => 'field',
    ],
    'dsu_srh-recipes-search' => [
      'template' => 'dsu_srh-recipes-search',
      'variables' => [
        'variables' => [],
        'title' => NULL,
        'empty' => NULL,
      ],
    ],
    'node__recipe' => [
      'render element' => 'elements',
      'template' => 'node--recipe', //removed the "templates/"
      'base hook' => 'node' //this line did the job
    ],
    'node__recipe__teaser' => [
      'render element' => 'elements',
      'template' => 'node--recipe--teaser', //removed the "templates/"
      'base hook' => 'node' //this line did the job
    ],
    'paragraph__recipe_steps' => [
      'render element' => 'elements',
      'template' => 'paragraph--recipe-steps', //removed the "templates/"
      'base hook' => 'paragraph' //this line did the job
    ],
    'paragraph__macronutrients' => [
      'render element' => 'elements',
      'template' => 'paragraph--macronutrients', //removed the "templates/"
      'base hook' => 'paragraph' //this line did the job
    ],
    'paragraph__recipe_ingredients' => [
      'render element' => 'elements',
      'template' => 'paragraph--recipe-ingredients', //removed the "templates/"
      'base hook' => 'paragraph' //this line did the job
    ],
    'block__block_content_recipe_searcher' => [
      'template' => 'block--block-content-recipe-searcher',
      //removed the "templates/"
      'base hook' => 'block',
      //this line did the job
      'variables' => [
        'search_form' => NULL,
        'pluguin_id' => NULL,
      ],
    ],
  ];
}

/**
 * @param $variables
 */
function dsu_srh_preprocess_field__field_recipe_ingredient(&$variables) {
  /*
  * First, we pass to javascript app the values we need to calculate the servings
  */
  $variables['#attached']['library'][] = 'dsu_srh/servings';
  $variables['servings_default'] = $variables['element']['#object']->get('field_recipe_number_servings')
    ->getValue()[0]['value'];
  $variables['#attached']['drupalSettings']['servings_default'] = $variables['element']['#object']->get('field_recipe_number_servings')
    ->getValue()[0]['value'];

  $moduleHandler = Drupal::service('module_handler');
  // It's the Meal planner extension enabled?
  $variables['servings'] = '4'; // Default value
  $variables['#attached']['drupalSettings']['servings_user'] = '4';
  if ($moduleHandler->moduleExists('dsu_mealplanner')) {
    $isAnon = Drupal::currentUser()->isAnonymous();
    // Then whe check if we need to change de default value
    if ($isAnon) {
      $session = Drupal::service('tempstore.private')->get('dsu_mealplanner');
      $userpre = $session->get('user_preferences');
      if (isset($userpre['servings'])) { // In case of anonymous user, with preferences setted
        $variables['servings'] = $userpre['servings'];
        $variables['#attached']['drupalSettings']['servings_user'] = $userpre['servings'];
      }
    }
    else { // User is authenticated
      $user = \Drupal\user\Entity\User::load(Drupal::currentUser()->id());
      // User have preferences setted in profile
      if ($user->get('field_servings')->value != NULL) {
        $variables['servings'] = $user->get('field_servings')->value;
        $variables['#attached']['drupalSettings']['servings_user'] = $user->get('field_servings')->value;
      }
    }
  }
}

/*
* Preprocess field recipe image to improve the responsive experience. The url of the image it's modified, and then the CDN couuld serve us this type of imagees. By this way, we keep the intelligence business in SRH.
*/
function dsu_srh_preprocess_field__field_recipe_images(&$variables) {
  if (isset($variables['element']['0']['#context'])) {
    $path_image = str_replace('original', 'resized', $variables['element']['0']['#context']['value']);
    $variables['image_resized_small'] = substr($path_image, 0, -4) . '_720_480' . substr($path_image, -4);
    $variables['image_resized_large'] = substr($path_image, 0, -4) . '_1024_320' . substr($path_image, -4);
    $variables['image_resized_medium'] = substr($path_image, 0, -4) . '_1080_850' . substr($path_image, -4);
    $variables['image_resized_big'] = substr($path_image, 0, -4) . '_1200_800' . substr($path_image, -4);
  }
}

/**
 * Implements hook_cron.
 */
function dsu_srh_cron() {
  // Get all configs of default srh configs.
  $config = Drupal::service('config.factory')->getEditable('dsu_srh.settings');

  // Updated type and overriding value of sync type in case of cron.
  $cron_update_type = $config->get('dsu_srh.dsu_connect_cron_sync_update_type');
  $config->set('dsu_srh.dsu_connect_last_update_type', $cron_update_type)
    ->save();

  // Get activated cron values.
  $activeCron = $config->get('dsu_srh.dsu_connect_periodic');
  $interval = $config->get('dsu_srh.dsu_connect_interval');
  $last_run = Drupal::state()
    ->get('dsu_srh.next_execution', time() - $interval - 1);
  if ($activeCron == 1 && ($last_run <= time() - $interval)) {

    // Disable Server indexing.
    $config->set('dsu_srh.dsu_single_indexing_server', '')->save();
    Importer::toggleSearchIndexingServer(FALSE);

    $queue = Drupal::queue('syncronizer_queue');
    Drupal::logger('SRH')->notice('Save Recipes Job created');
    $item = 1;
    $queue->createItem($item);
    Drupal::state()->set('dsu_srh.next_execution', time() + $interval);
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dsu_srh_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $content = $variables['elements']['content'];
  if (isset($content['#block_content'])
    and $content['#block_content'] instanceof BlockContentInterface) {
    $block_type_suggestion = 'block__block_content_' . $content['#block_content']->bundle();
    $suggestions_rev = array_reverse($suggestions); // Taking care of observed duplication of block__block_content
    $index = array_search('block__block_content', $suggestions_rev);
    if (is_numeric($index)) {
      array_splice($suggestions_rev, $index, 0, $block_type_suggestion);
      $suggestions = array_reverse($suggestions_rev);
    }
    else {
      $suggestions[] = $block_type_suggestion;
    }
  }
}

/**
 * @param $variables
 */
function dsu_srh_preprocess_block(&$variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    if ($variables['elements']['content']['#block_content']->bundle() == 'recipe_searcher') {
      $options['collection'] = $variables['elements']['content']['#block_content']->get('field_searcher_collections')
        ->getValue();
      $options['number'] = $variables['elements']['content']['#block_content']->get('field_searcher_number_recipes')
        ->getValue();
      $options['textbox'] = $variables['elements']['content']['#block_content']->get('field_searcher_show_textbox')
        ->getValue();
      // Extract and prepare Tags value
      $tags_para = $variables['elements']['content']['#block_content']->get('field_searcher_tags')
        ->getValue();
      if (isset($tags_para)) {
        foreach ($tags_para as $value) {
          $p = Paragraph::load($value['target_id']);
          if (!empty($p->get('field_searcher_tags_title')->getValue())) {
            $tags[] = [
              'title' => $p->get('field_searcher_tags_title')
                ->getValue()[0]['value'],
              'tags' => $p->get('field_searcher_tags')->getValue()[0]['value'],
            ];
          }
        }
        if (isset($tags)) {
          $options['tags'] = $tags;
        }
      }
      $options['id'] = $variables['elements']['#derivative_plugin_id'];
      $modal_form = Drupal::formBuilder()
        ->getForm('Drupal\dsu_srh\Form\RecipeSearch', $options);
      $variables['search_form'] = $modal_form;
      $variables['pluguin_id'] = $options['id'];
    }
  }
}


function dsu_srh_install() {
  drupal_set_message(t('1 - Congratulations, now you are connected to SRH. Depending on your site configuration you may have the fields of your new content type Recipe hidden. Please check de view configuration, and enable all the field to be able to use it. <a href="structure/types/manage/recipe/display"> Here </a>'), 'status');
  drupal_set_message(t('2 - In other hand, visit the configuration page <a href="config/dsu_srh/config"> Here </a> and configure and test your SRH connection'), 'status');
  drupal_set_message(t('3 - Once your are connected to SRH, please proceed with the importation process before using the search box, <a href="config/dsu_srh/importer"> Here </a>, (will increase the performance).'), 'status');
}
